@import url("https://fonts.googleapis.com/css?family=Roboto:300,400,700");
@font-face {
  font-family: 'icomoon';
  src: url("../fonts/icomoon/icomoon.eot?wtzv43");
  src: url("../fonts/icomoon/icomoon.eot?wtzv43#iefix") format("embedded-opentype"), url("../fonts/icomoon/icomoon.ttf?wtzv43") format("truetype"), url("../fonts/icomoon/icomoon.woff?wtzv43") format("woff"), url("../fonts/icomoon/icomoon.svg?wtzv43#icomoon") format("svg");
  font-weight: normal;
  font-style: normal; }

.icon-cross {
  content: "\e904"; }

.icon-nav-watch {
  content: "\e900"; }

.icon-nav-about {
  content: "\e901"; }

.icon-nav-adults {
  content: "\e902"; }

.icon-nav-safe {
  content: "\e903"; }

/* @keyframes duration | timing-function | delay |
   iteration-count | direction | fill-mode | play-state | name

EG: animation: 3s ease-in 1s 2 reverse both paused slidein; */
/* WRAP */
/* ELLIP */
/* TRANSITIONS */
/* BREAK POINTS */
/* -- min-width by default
   -- if 2nd parameter is 'max-width', max-width used instead
   -- if $until is added, $point becomes min-width and $until is max-width */
/* LIST MARGINS */
/* CALC */
/* FLEXBOX */
/* ------------------------------------------------------
 * FLEXBOX MIXIN
 * ------------------------------------------------------
 * @desc  Let's you create flexbox container and item css with 2 mixins

 * @usage
 *
 *    @include flexbox-container(
 *
 *        $display : flex,        [flex / inline]
 *        $direction : row,       [row / row-reverse / column / column-reverse]
 *        $wrap : nowrap,         [nowrap / wrap / wrap-reverse]
 *        $justify : start,       [start / end / center / between / around]
 *        $alignContent : start,  [start / end / center / between / around / stretch]
 *        $alignItems : center     [start / end / center / baseline / stretch]
 *
 *    );
 *
 *
 *    @include flexbox-item(
 *
 *        $order : null,          [integer] -- custom order of items
 *        $grow : 0,              [0 / 1]
 *        $shrink : 1,            [0 / 1]
 *        $basis : auto,          [auto / <length>]
 *        $alignSelf : auto       [auto / start / end / center / baseline / stretch]
 *
 *    );
 *
 * @author maxoys45
 * @version 0.1
 * ------------------------------------------------------ */
/* ASPECT RATIO */
/* HARDWARE ACCEL */
/* CENTRED CONTENT */
/* TARGET IE10+ */
/* BG IMAGE SVG WITH PNG FALLBACK */
/* ANIMATED PNG */
/* Mixin to replicate an animated GIF using Keyframes and a PNG Sprite image.

	$numberOfSteps 	= the number of frames to step between (no limit to number of steps)
	$animName 		= purely used as the animation name to avoid duplicate animations
	$imageSize 		= the width or height of the PNG image which needs to be shown in each frame
	$duration 		= the total time for the animation in seconds
	$playCount		= the way the animation is played (linear, infinite, inout)

	** requires auto-prefixer to support all modern browsers
	** Requires 'compass/css3' */
/* example use */
.animatedImage {
  animation: YES_WE_CAN 1s 2 forwards;
  /* places the keyframes animation outside of the selector */
  background-image: url("http://www.maxhenchman.co.uk/random/123test.png");
  background-repeat: no-repeat;
  background-color: #FF0000;
  display: block;
  width: 100px;
  height: 100px;
  overflow: hidden;
  margin: 20px auto; }

@keyframes YES_WE_CAN {
  0% {
    background-position: 0 0; }
  20% {
    background-position: -0px 0; }
  20.0001% {
    background-position: -100px 0; }
  40% {
    background-position: -100px 0; }
  40.0001% {
    background-position: -200px 0; }
  60% {
    background-position: -200px 0; }
  60.0001% {
    background-position: -300px 0; }
  80% {
    background-position: -300px 0; }
  80.0001% {
    background-position: -400px 0; }
  100% {
    background-position: -400px 0; } }

/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

*, *:before, *:after {
  box-sizing: border-box; }

html {
  line-height: 1;
  font-size: 10px; }

body {
  font-family: "Roboto", sans-serif; }

input, button, select, textarea, optgroup, option {
  font-family: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  color: inherit; }

h1, h2, h3, h4 {
  line-height: 1.3; }

h1 {
  font-size: 4.8em;
  margin-bottom: .8em; }

h2 {
  font-size: 4em;
  margin-bottom: .2em; }
  @media screen and (min-width: 480px) {
    h2 {
      font-size: 5em; } }

h3 {
  font-size: 2.1em;
  margin-bottom: .5em; }

h4 {
  font-size: 1.4em;
  margin-bottom: .5em; }

a, button, input, textarea {
  outline: none; }

p {
  line-height: 1.3;
  font-size: 1.5rem;
  margin-bottom: 1em; }
  p:last-of-type {
    margin-bottom: 0; }
  p a {
    font-weight: 300; }
  @media screen and (min-width: 480px) {
    p {
      font-size: 2rem; } }

.anchor, p a {
  font-size: 2rem;
  line-height: 1.3;
  outline: none;
  text-decoration: underline; }

a {
  text-decoration: none;
  color: inherit; }

img {
  display: block;
  max-width: 100%; }

strong {
  font-weight: 700; }

.hidden {
  display: none; }

.input--default {
  display: inline-block;
  vertical-align: middle;
  cursor: default;
  border: 1px solid #EEEEEE;
  border-radius: 0.2rem;
  background: #FFFFFF;
  padding: 1.5rem 1rem;
  font-size: 2rem;
  outline: none;
  color: #212121;
  text-align: left;
  position: relative;
  min-width: 150px;
  line-height: 1.3;
  text-decoration: none; }
  .input--default:hover {
    color: inherit; }
  .input--default:focus, .input--default:active {
    border-color: #00A1B6; }

.stripInput {
  border: none;
  background: none;
  padding: 0;
  cursor: pointer;
  outline: none; }

.hiddenInputs {
  width: 0.1px;
  height: 0.1px;
  opacity: 0;
  overflow: hidden;
  position: absolute;
  z-index: -1; }

.justify {
  text-align: justify; }

.wrapped {
  max-width: 1224px;
  margin-left: auto;
  margin-right: auto; }

iframe {
  width: 100%; }

/* MAIN STYLES */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
